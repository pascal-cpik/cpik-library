;   Copyright (C) 2015, Pascal Niklaus pascal@niklaus.org
;
;   This file is part of the CPIK library
;   ------------------------------------------------------- 
;   This library is free software; you can redistribute it and/or modify it
;   under the terms of the GNU General Public License as published by the
;   Free Software Foundation; either version 2.1, or (at your option) any
;   later version.
 
;   This library is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
 
;   You should have received a copy of the GNU General Public License 
;   along with this library; see the file COPYING. If not, write to the
;   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
;   MA 02110-1301, USA.
 
;   As a special exception, if you link this library with other files,
;   some of which are compiled with CPIK, to produce an executable,
;   this library does not by itself cause the resulting executable to
;   be covered by the GNU General Public License. This exception does
;   not however invalidate any other reasons why the executable file
;   might be covered by the GNU General Public License.
;
;   VERSION 0.1
;
;   HISTORY
;   - Created 24-02-2014 by P. Niklaus
;
;   CONTENTS
;
;   C18_memcpy   
;   C18_memmove
;   C18_xmemshift  
;
;   ----------------------------------------------------------------------- 



; copy memory block from source to destination
;
; This function copies n bytes from memory area src to memory area dest.
; The memory areas may not overlap -- use memmove otherwise
;
; void *memcpy(void *dest, void *src, size_t n)
; 24 bytes (+40 bytes shared with C18_memmove)
;<+C18_memcpy>
C18_memcpy
        call    C18_memmovecopy_args
C18_memcpy_forward
        comf    R1,f,0           ; complement counter
        comf    R1+1,f,0         ; in loop, we count upwards to 0
        bra     C18_memcpy_start

C18_memcpy_loop
        movff   POSTINC1,POSTINC2 ; forward copy
C18_memcpy_start
        incf    R1,F,0          ; last byte reached?
        bnz     C18_memcpy_loop
        incf    R1+1,F,0        ;   (R1 reaches 0)
        bnz     C18_memcpy_loop ; no, continue loop
        return  0
;<?C18_memmovecopy_args>
;<->




; copies args from stack for memcpy and memmove
; 40 bytes
;<+C18_memmovecopy_args>
C18_memmovecopy_args
        movlw   -3              ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1              ; copy dest to FSR2 and R0
        movf    PLUSW0,W,0      ; (return value is dest)
        movwf   FSR2L,0         
        movwf   R0,0
        movf    INDF0,W,0
        movwf   FSR2H,0
        movwf   R0+1,0

        movlw   -5              ; number of bytes to copy
        movff   PLUSW0,R1
        movlw   -4
        movff   PLUSW0,R1+1
        return  0
;<->



; copy memory block from source to destination
;
; This function copies n bytes from memory area src to memory area dest.
; The memory areas may overlap: Overlap is handled by adapting the copy direction.
; This version works with a direction flag, avoiding duplication of small code parts
;
; void *memmove(void *dest, void *src, size_t n)
; 70 bytes (+24 from C18_memcpy and +40 from C18_memmovecopy_args)
;<+C18_memmove>
C18_memmove
        call    C18_memmovecopy_args

        movf    FSR1L,W         ; determine copy direction
        subwf   FSR2L,W
        movf    FSR1H,W
        btfss   STATUS,C
        addlw   1
        subwf   FSR2H,W

        IBNC_FAR C18_memcpy_forward  ; copy forwards as in strcpy
        
C18_memmove_entry_from_memshift_backward         
        movf    R1,W,0          ; copy backwards                                
        addwf   FSR1L,F         ; FSR1 += block length (R1)
        movf    R1+1,W,0
        btfsc   STATUS,C
        incf    R1+1,W,0
        addwf   FSR1H+1,F

        movf    R1,W,0          ; FSR2 += block length (R1)
        addwf   FSR2L,F
        movf    R1+1,W,0
        btfsc   STATUS,C
        incf    R1+1,W,0
        addwf   FSR2H+1,F

        comf    R1,f,0           ; complement counter
        comf    R1+1,f,0         ; in loop, we count upwards to 0

        movf    POSTDEC1         ; decrement FSR1/2 by one
        movf    POSTDEC2

        bra     C18_memmove_start

C18_memmove_loop
        movff   POSTDEC1,POSTDEC2 ; backward copy
C18_memmove_start
        incf    R1,F,0          ; last byte reached?
        bnz     C18_memmove_loop
        incf    R1+1,F,0
        bnz     C18_memmove_loop    ; no, continue loop
        return 0
;<?C18_memcpy>
;<?C18_memmovecopy_args>
;<->



; Shift array data
; 
; This function is useful to shift array data, with overlapping source and destination
;
; vec:    array start address
; offset: source part, indicated by number of array elements from start (0=first element)
; shift:  number of elements by which data is to be shifted (-128..+127, e.g. -3 = 3 positions backwards)
; blklen: number of elements to be copied (0..255)
; size:   size of single array element (0..255)
;                  0 -1         -2            -3             -4               -5 
; void C18_xmemshift(void *vec, uint8_t offset, int8_t shift, int8_t blklen, uint8_t size)
;
; 86 bytes (+70 bytes from C18_memmove, +24 from C18_memcpy, +40 from C18_memmovecopy_args)
;<+C18_xmemshift>
C18_xmemshift
          
          movlw   -5              ; R0 = size (temporary, used many times) 
          movff   PLUSW0,R0       
 
          movlw   -2              ; prodl:h = offset * size 
          movf    PLUSW0,W,0      ; 
          mulwf   R0,0    
          
          movlw   -1              ; FSR1 = vec + offset*size 
          movf    PLUSW0,W,0      ; vec_L
          addwf   PRODL,W,0      
          movwf   FSR1L,0
          movf    INDF0,W,0       ; vec_H
          btfsc   STATUS,C        
          incf    INDF0,W       
          addwf   PRODH,W,0
          movwf   FSR1H,0
                                      
          movlw   -4              ; blklen
          movf    PLUSW0,W,0
          mulwf   R0,0            ; * size
          movff   PRODL,R1
          movff   PRODH,R1+1      
                           
          movlw   -3              ; multiply size(unsigned) with shift(signed)...
          movf    PLUSW0,W,0      ; shift
          mulwf   R0,0            ; * size         
          bnn     C18_xmemshift_pos ; N not modified by mulwf
          movf    R0,W,0          ; shift if negative
          subwf   PRODH,F         ; -> subtract size from PRODH
C18_xmemshift_pos
          movf    PRODL,W,0       ; ...and add to FSR1 -> store in FSR2 
          addwf   FSR1L,W,0
          movwf   FSR2L,0
          movf    PRODH,W,0
          btfsc   STATUS,C
          incf    PRODH,W,0
          addwf   FSR1H,W,0
          movwf   FSR2H,0
          
          movlw   -3              ; check again if size is negative
          btfsc   PLUSW0,N,0
          bra     C18_xmemshift_forward ; yes, copy forward
          goto    C18_memmove_entry_from_memshift_backward ; no, copy backwards
C18_xmemshift_forward
          goto    C18_memcpy_forward
;<?C18_memmove>
;<->
