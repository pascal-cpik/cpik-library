;   Copyright (C) 2015, Pascal Niklaus pascal@niklaus.org
;
;   This file is part of the CPIK library
;   ----------------------------------------------------------------------- 
;   This library is free software; you can redistribute it and/or modify it
;   under the terms of the GNU General Public License as published by the
;   Free Software Foundation; either version 2.1, or (at your option) any
;   later version.
 
;   This library is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
 
;   You should have received a copy of the GNU General Public License 
;   along with this library; see the file COPYING. If not, write to the
;   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
;   MA 02110-1301, USA.
 
;   As a special exception, if you link this library with other files,
;   some of which are compiled with CPIK, to produce an executable,
;   this library does not by itself cause the resulting executable to
;   be covered by the GNU General Public License. This exception does
;   not however invalidate any other reasons why the executable file
;   might be covered by the GNU General Public License.


;   VERSION 0.1
;
;   HISTORY
;   - 24-02-2014 created by Pascal Niklaus
;   - 26-01-2016 ROM string versions of functions added
;
;   CONTENTS
;
;   C18_strlen
;   C18_strcpy
;   C18_strcat
;   C18_strcmp
;   C18_strncmp
;   C18_strcasecmp
;   C18_strncasecmp
;   C18_strcmpROM
;
;   ----------------------------------------------------------------------- 

; strlen
; size_t strlen(char *s);
; 24 bytes
;<+C18_strlen>
C18_strlen
        movlw   -1             ; copy s to FSR1
        movff   PLUSW0,FSR1L     
        movff   INDF0,FSR1H         
        movwf   _r0,0          ; take advantage that w=0xff
        movwf   _r0+1,0        
L18_strlen_loop
        infsnz  _r0,F,0
        incf    _r0+1,F,0
        movf    POSTINC1,W,0
        bnz     L18_strlen_loop                  
        return  0
X18_strlen        
;<->




; copy string
;
; returns pointer to destination
;
; char *strcpy(char *dest, char *src)
; 34 bytes
;<+C18_strcpy>
C18_strcpy
        movlw   -3             ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1             ; copy dest to FSR2 and R
        movf    PLUSW0,W,0
        movwf   FSR2L,0     
        movwf   _r0,0
        movf    INDF0,W,0
        movwf   FSR2H,0
        movwf   _r0+1,0
L18_strcpy_entry_from_strcat
L18_strcpy_loop
        movf    POSTINC1,W,0
        movwf   POSTINC2,0        
        bnz     L18_strcpy_loop
        return  0 
X18_strcpy        
;<->



; apped string
;
; returns pointer to destination
;
; char *strcat(char *dest, char *src)
; 34 bytes
;<+C18_strcat>
C18_strcat
        movlw   -3             ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1             ; copy dest to FSR2 and R
        movf    PLUSW0,W,0
        movwf   FSR2L,0
        movwf   _r0,0
        movf    INDF0,W,0
        movwf   FSR2H,0         
        movwf   _r0+1,0
                
L18_strcat_loop
        movf    POSTINC2,W,0        
        bnz     L18_strcat_loop
        movf    POSTDEC2,W,0
        IBRA    L18_strcpy_entry_from_strcat
X18_strcat
;<?C18_strcpy>        
;<->



; compare two strings
;
; returns -1,0,1 if s1<s2, s1=s2, s1>s2
; note that comparisons are unsigned (matters for chars >0x7f) 
; although char is signed. This is compatible with the GNU libc's
; behaviour
;
; char *strcmp(char *s1, char *s2)
; 48 bytes
;<+C18_strcmp>
C18_strcmp
        clrf    _r0,0
        movlw   -3               ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1               ; copy dest to FSR2         
        movff   PLUSW0,FSR2L     
        movff   INDF0,FSR2H

        movf    POSTDEC1,W,0
                   
L18_strcmp_loop
        movf    PREINC1,W,0
        subwf   POSTINC2,W,0
        bnc     L18_strcmp_smaller
        bz      L18_strcmp_checkend
L18_strcmp_larger   
        incf    _r0,F,0
        return  0
L18_strcmp_smaller
        decf    _r0,F,0
        return  0
L18_strcmp_checkend
        movf    INDF1,W,0
        bnz     L18_strcmp_loop        
        return  0
X18_strcmp        
;<->


; compare at most n characters of two strings
; see strcmp for more details
;
; char *strncmp(char *s1, char *s2, size_t n)
; 72 bytes
;<+C18_strncmp>
C18_strncmp
        clrf    _r0,0
        movlw   -5                ; R1 is n
        movff   PLUSW0,_r1
        movlw   -4
        movff   PLUSW0,_r1+1        
        comf    _r1,F,0
        comf    _r1+1,F,0
                
        movlw   -3               ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1               ; copy dest to FSR2 
        movff   PLUSW0,FSR2L     
        movff   INDF0,FSR2H         

        movf    POSTDEC1,W,0

L18_strncmp_loop
        incf    _r1,F,0
        bnz     L18_strncmp_cont
        incf    _r1+1,F,0
        bz      L18_strncmp_end
L18_strncmp_cont        
        movf    PREINC1,W,0
        subwf   POSTINC2,W,0
        bnc     L18_strncmp_smaller
        bz      L18_strncmp_checkend
L18_strncmp_larger   
        incf    _r0,F,0
        return  0
L18_strncmp_smaller
        decf    _r0,F,0
        return  0
L18_strncmp_checkend
        movf    INDF1,W,0
        bnz     L18_strncmp_loop
L18_strncmp_end        
        return  0
X18_strncmp        
;<->


; compare two strings, ignoring the case of the 
; letters A-Z
;
; char *strcasecmp(char *s1, char *s2)
; 56 bytes (+10 bytes for shared L18_strlib_toupper)
;<+C18_strcasecmp>
C18_strcasecmp
        clrf    _r0,0
        movlw   -3               ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1               ; copy dest to FSR2 
        movff   PLUSW0,FSR2L     
        movff   INDF0,FSR2H

        movf    POSTDEC1,W,0
                   
L18_strcasecmp_loop
        movf    POSTINC2,W,0
        ICALL   L18_strlib_toupper
        movwf   _r0+1,0
        movf    PREINC1,W,0
        ICALL   L18_strlib_toupper        
        subwf   _r0+1,W,0
        bnc     L18_strcasecmp_smaller
        bz      L18_strcasecmp_checkend
L18_strcasecmp_larger   
        incf    _r0,F,0
        return  0
L18_strcasecmp_smaller
        decf    _r0,F,0
        return  0
L18_strcasecmp_checkend
        movf    INDF1,W,0
        bnz     L18_strcasecmp_loop
        return  0        
X18_strcasecmp        
;<?L18_strlib_toupper>
;<->




; convert ASCII code in W to upper case
; 10 bytes
;<+L18_strlib_toupper>
L18_strlib_toupper
        addlw   255 - 'z'
        addlw   ('z'-'a')+1
        bnc     L18_strlib_toupper_end
        addlw   'A'-'a'
L18_strlib_toupper_end
        return  0
X18_strlib_toupper
;<->




; convert ASCII code in W to lower case
; 10 bytes
;<+L18_strlib_tolower>
L18_strlib_tolower
        addlw   255 - 'Z'
        addlw   ('Z'-'A')+1
        bnc     C18_strlib_tolower_end
        addlw   'a'-'A'
L18_strlib_tolower_end
        return  0
X18_strlib_tolower        
;<->



; compare two strings, ignoring the case of A-Z, and
; comparing at most n characters
;
; char *strncasecmp(char *s1, char *s2, size_t n)
; 80 bytes (+10 bytes for shared L18_strlib_toupper)
;<+C18_strncasecmp>
C18_strncasecmp
        clrf    _r0,0
        movlw   -5                ; R1 is n
        movff   PLUSW0,_r1
        movlw   -4
        movff   PLUSW0,_r1+1        
        comf    _r1,F,0
        comf    _r1+1,F,0
                
        movlw   -3               ; copy src to FSR1
        movff   PLUSW0,FSR1L
        movlw   -2
        movff   PLUSW0,FSR1H

        movlw   -1               ; copy dest to FSR2 
        movff   PLUSW0,FSR2L     
        movff   INDF0,FSR2H

        movf    POSTDEC1,W,0
                   
L18_strncasecmp_loop
        incf    _r1,F,0
        bnz     L18_strncasecmp_cont
        incf    _r1+1,F,0
        bz      L18_strncasecmp_end
L18_strncasecmp_cont        
        movf    POSTINC2,W,0
        ICALL   L18_strlib_toupper
        movwf   _r0+1,0
        movf    PREINC1,W,0
        ICALL   L18_strlib_toupper        
        subwf   _r0+1,W,0
        bnc     L18_strncasecmp_smaller
        bz      L18_strncasecmp_checkend
L18_strncasecmp_larger   
        incf    _r0,F,0
        return  0
L18_strncasecmp_smaller
        decf    _r0,F,0
        return  0
L18_strncasecmp_checkend
        movf    INDF1,W,0
        bnz     L18_strncasecmp_loop
L18_strncasecmp_end        
        return  0        
X18_strncasecmp        
;<?L18_strlib_toupper>
;<->


; ============================================================
;               EMBEDDED ROM DATA VARIANTS



; compare two strings, with the latter being embedded with the code in ROM
;
; returns -1,0,1 if s1<s2, s1=s2, s1>s2
; note that comparisons are unsigned (matters for chars >0x7f) 
; although char is signed. This is compatible with the GNU libc's
; behaviour
;
; char ROMstrcmp_(char *s1)
; 38 bytes
;<+C18_ROMstrcmp_>

C18_ROMstrcmp_
        clrf    _r0,0           ; result = 0
        movlw   -1              ; copy RAM string pointer to FSR1
        movff   PLUSW0,FSR1L
        movff   INDF0,FSR1H
        movf    POSTDEC1,W,0    

L18_ROMstrcmp_loop
        tblrd*+                 ; read rom byte and increment ptr
        movf    TABLAT,W,0
        subwf   PREINC1,W,0
        bnc     L18_ROMstrcmp_smaller
        bz      L18_ROMstrcmp_checkend
L18_ROMstrcmp_larger   
        incf    _r0,F,0
        return  0
L18_ROMstrcmp_smaller
        decf    _r0,F,0
        return  0
L18_ROMstrcmp_checkend
        movf    INDF1,W,0
        bnz     L18_ROMstrcmp_loop 
        return  0               ; end of strings reached
X18_ROMstrcmp_
;<->





; copy string (pointed to by TBLPTR)
;
; char ROMstrcpy_(char *dest)
; 20 bytes
;<+C18_ROMstrcpy_>
C18_ROMstrcpy_
        movlw   -1             ; copy dest to FSR1 and R
        movff    PLUSW0,FSR1L
        movff    INDF0,FSR1H
L18_ROMstrcpy_entry
L18_ROMstrcpy_loop
        tblrd*+
        movf    TABLAT,W,0
        movwf   POSTINC1,0        
        bnz     L18_ROMstrcpy_loop
        return  0 
X18_ROMstrcpy_        
;<->





; apped string (pointed to by TBLPTR)
;
; returns pointer to destination
;
; char *strcat_(char *dest)
; 18 bytes
;<+C18_ROMstrcat_>
C18_ROMstrcat_
        movlw   -1             ; copy dest to FSR2 and R
        movff    PLUSW0,FSR1L
        movff    INDF0,FSR1H
L18_ROMstrcat_entry             ; entry from C18_RFstrcpy_/RFstrcat_
L18_ROMstrcat_loop
        movf    POSTINC1,W,0    ; skip to end of destination    
        bnz     L18_ROMstrcat_loop
        movf    POSTDEC1,W,0
        IBRA    L18_ROMstrcpy_entry ; perform regular copy
X18_ROMstrcat_
;<?C18_ROMstrcpy_>        
;<->


; ============================================================
;                    ROM ACCESSOR VARIANTS

; ### Warning: These functions rely on a side effect of the
; ### ROM accessor function. After accessing element 0,
; ### TBLPTR points to the next byte. 


; copy string passed with ROM accessor
;
; char *RFstrcpy(char *dest, accessor_fun)
; 34 bytes
;<+C18_RFstrcpy>
C18_RFstrcpy
        clrf    PREINC0,0         ; push index of 0
        movlw   -4
        movff   PLUSW0,PREINC0
        movff   PLUSW0,PREINC0        
        ICALL   indirect_call     ; call ROM accessor to set TBLPTR
        movf    POSTDEC0,W,0      ; clean stack
C18_RFstrcpy_entry        
        movlw    -1               ; copy dest to FSR1 
        movf    PLUSW0,W,0
        movwf   FSR1L,0
        movwf   _r0,0
        movf    INDF0,W,0
        movwf   FSR1H,0
        movwf   _r0+1,0
        IBRA     L18_ROMstrcpy_entry
X18_RFstrcpy
;<?indirect_call>
;<?C18_ROMstrcpy_>        
;<->


; append string passed with ROM accessor
;
; char *strcpy(char *dest, accessor_fun)
; 34 bytes
;<+C18_RFstrcat>
C18_RFstrcat
        clrf    PREINC0,0         ; push index of 0
        movlw   -4
        movff   PLUSW0,PREINC0
        movff   PLUSW0,PREINC0        
        ICALL   indirect_call     ; call ROM accessor to set TBLPTR
        movf    POSTDEC0,W,0      ; clean stack
C18_RFstrcat_entry        
        movlw    -1               ; copy dest to FSR1 
        movf    PLUSW0,W,0
        movwf   FSR1L,0
        movwf   _r0,0
        movf    INDF0,W,0
        movwf   FSR1H,0
        movwf   _r0+1,0
        IBRA     L18_ROMstrcat_entry
X18_RFstrcat
;<?C18_ROMstrcat_>
;<->

; ============================================================
;                    ROM POINTER VARIANTS



; copy string passed with ROM pointer
;
; char *RPstrcpy(char *dest, ROMptr src)
; 18 bytes
;<+C18_RPstrcpy>
C18_RPstrcpy
        movlw   -3
        movff   PLUSW0,PREINC0          ; copy src
        movff   PLUSW0,PREINC0       
        ICALL   C18__make_rom_pointer_      ; load TBLPTR
        movf    POSTDEC0,W,0
        movf    POSTDEC0,W,0        
        IBRA    C18_RFstrcpy_entry        
X18_RPstrcpy
;<?C18_RFstrcpy>
;<?C18__make_rom_pointer_>
;<->



; append string passed with ROM pointer
;
; char *RPstrcpy(char *dest, ROMptr src)
; 18 bytes
;<+C18_RPstrcat>
C18_RPstrcat
        movlw   -3
        movff   PLUSW0,PREINC0          ; copy src
        movff   PLUSW0,PREINC0       
        ICALL   C18__make_rom_pointer_  ; load TBLPTR
        movf    POSTDEC0,W,0
        movf    POSTDEC0,W,0        
        IBRA    C18_RFstrcat_entry        
X18_RPstrcat
;<?C18_RFstrcat>
;<?C18__make_rom_pointer_>
;<->


