;   Copyright (C) 2015, Pascal Niklaus pascal@niklaus.org
;
;   This file is part of the CPIK library
;   -----------------------------------------------------------------------
;   This library is free software; you can redistribute it and/or modify it
;   under the terms of the GNU General Public License as published by the
;   Free Software Foundation; either version 2.1, or (at your option) any
;   later version.

;   This library is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.

;   You should have received a copy of the GNU General Public License
;   along with this library; see the file COPYING. If not, write to the
;   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
;   MA 02110-1301, USA.

;   As a special exception, if you link this library with other files,
;   some of which are compiled with CPIK, to produce an executable,
;   this library does not by itself cause the resulting executable to
;   be covered by the GNU General Public License. This exception does
;   not however invalidate any other reasons why the executable file
;   might be covered by the GNU General Public License.

;   VERSION 0.1
;
;   HISTORY
;   - 17-04-2015 created by P. Niklaus 

;   CONTENTS
;
;   C18_toBCD
;   C18_fromBCD
;
;   -----------------------------------------------------------------------

; convert 8 bit unsigned to 2-digit BCD
;
; This functions converts a binary value to a 2-digit BCD representation.
;
; uint8_t toBCD(uint8_t x)
;
; x: binary number, from 0 to 99

;<+C18_toBCD>
C18_toBCD           
                    movf    INDF0,W,0     ; get binary number (0..99)
                    ICALL   divWby10   
                    movwf   _r0,0          ; R0 = n/10
                    movlw   10        
                    mulwf   _r0,0          ; prodl = R0*10
                    swapf   _r0,F,0        ; move to upper digit
                    movf    PRODL,W,0     
                    subwf   INDF0,W,0     ; n - (n/10)*10
                    iorwf   _r0,F,0        ; ior into R0
                    return
X18_toBCD

;<?divWby10>
;<->

;<+divWby10>    
divWby10            movwf   _r1+1,0        ; store n
                    bcf     STATUS,C,0
                    rrcf    WREG,F,0      ; W = n/2
                    movwf   _r1,0          ; 
                    bcf     STATUS,C,0
                    rrcf    _r1,F,0        ; R1 = n/4
                    addwf   _r1,F,0        ; R1 += W
                    movf    _r1,W,0
                    swapf   WREG,F,0
                    andlw   0x0f          ; W = R1>>4
                    addwf   _r1,F,0        ; R1 += W
                    bcf     STATUS,C,0
                    rrcf    _r1,F,0
                    bcf     STATUS,C,0
                    rrcf    _r1,F,0
                    bcf     STATUS,C,0    
                    rrcf    _r1,F,0        ; q >>= 3
                    bcf     STATUS,C,0    
                    rlcf    _r1,W,0        
                    rlcf    WREG,F,0      ; C is certainly 0, no need to clear C
                    addwf   _r1,W,0
                    bcf     STATUS,C,0
                    rlcf    WREG,F,0
                    subwf   _r1+1,W,0 
                    addlw   255-9
                    movlw   0
                    addwfc  _r1,W,0
                    return  0
;<->

; convert 2-digit BCD to unsigned char
;
; This functions converts a 2-digit BCD to a binary representation.
;
; uint8_t fromBCD(uint8_t x)
;
; x: BCD number, from 0x00 to 0x99

;<+C18_fromBCD>
C18_fromBCD         
                    swapf   INDF0,W,0     ; get upper digit
                    andlw   0x0f
                    movwf   _r0,0   
                    movlw   10        
                    mulwf   _r0,0          ; prodl = R0*10
                    movf    INDF0,W,0
                    andlw   0x0f          ; lower digit
                    addwf   PRODL,W,0
                    movwf   _r0,0
                    return  0
X18_fromBCD
                    
;<->
